import os

HeaderText = "// Generated by CodeGenerators/ASTCodeGenerator/ast_gen.py\n"

def writeto( output_path, code ):
    with open( output_path, mode = "w", encoding = "utf8" ) as f:
        f.write( HeaderText )
        f.write( code )

def generate_ast( setting, ast, namespace_part, template_file, output_directory, prefix = "Ast", suffix = "" ):
    with open( template_file, encoding="utf8" ) as f:
        template = f.read()

    namespace = setting.root_namespace + "." + namespace_part
    name      = prefix + ast.name + suffix
    ast_id    = ast.name
    desc      = ast.description

    code = template
    code = code.replace( "__namespace__", namespace )
    code = code.replace( "__name__", name )
    code = code.replace( "__ast_id__", ast_id )
    code = code.replace( "__desc__", desc )

    os.makedirs( output_directory, exist_ok = True )
    output_path = os.path.join( output_directory, name + ".cs" )

    writeto( output_path, code )

def generate_ast_all( setting, ast_list, namespace_part, template_file, output_directory, prefix = "Ast", suffix = "" ):

    for x in ast_list:
        generate_ast( setting, x, namespace_part, template_file, output_directory, prefix, suffix )

def generate_ast_id( setting, ast_list, template_file, output_directory ):
    with open( template_file, encoding="utf8" ) as f:
        template = f.read()

    namespace = setting.root_namespace
    code = template

    enum_code = "        None,\n"
    for x in ast_list:
        enum_code += "        " + x.name + ",\n"

    code = code.replace( "__namespace__", namespace )
    code = code.replace( "__node_ids__", enum_code )

    os.makedirs( output_directory, exist_ok = True )
    output_path = os.path.join( output_directory, "AstNodeId.cs" )

    writeto( output_path, code )


def generate_ast_visitor( setting, ast_list, template_file, output_directory, prefix = "Ast", suffix = "" ):
    with open( template_file, encoding="utf8" ) as f:
        template = f.read()

    namespace = setting.root_namespace
    code = template

    visit_code = ""
    for x in ast_list:
        visit_code += "        public T Visit( " + prefix + x.name + suffix + " node );\n"

    code = code.replace( "__namespace__", namespace )
    code = code.replace( "__visitor__", visit_code )

    os.makedirs( output_directory, exist_ok = True )
    output_path = os.path.join( output_directory, "IAstVisitor.cs" )

    writeto( output_path, code )

