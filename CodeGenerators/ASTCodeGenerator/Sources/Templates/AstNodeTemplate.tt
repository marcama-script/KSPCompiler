<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="System.Linq" #>
<#
    var info = Context.Info;
    var nameSpace = info.GetFullNamespace( Context.Setting );
    var astNodeClass = Context.AstNodeClass;
    var astId = astNodeClass.Name;
    var className = info.GetClassName( astNodeClass );
    var attribute = TemplateUtil.ExpandAttribute( astNodeClass.Attributes );
    var baseClass = TemplateUtil.ExpandListWithDelimiter( astNodeClass.BaseClasses, "," );
    var field = TemplateUtil.ExpandTextWithField( info, astNodeClass, astNodeClass.Fields );
    var hasField = !string.IsNullOrEmpty( field );
    var ctor = TemplateUtil.ExpandTextWithConstructor( info, astNodeClass, astNodeClass.Constructors );
    var hasAnyAcceptor = astNodeClass.HasAccept || astNodeClass.HasAcceptChildren;
    var hasAccept = astNodeClass.HasAccept;
    var acceptStatement = TemplateUtil.ExpandTextWithStatements( astNodeClass.AcceptStatements );
    var hasAcceptChildren = astNodeClass.HasAcceptChildren;
    var acceptChildrenStatement = TemplateUtil.ExpandTextWithStatements( astNodeClass.AcceptChildrenStatements );
    var nameable = astNodeClass.BaseClasses.Any( x => x == "INameable" );
#>
// Generated by CodeGenerators/ASTCodeGenerator
<#= TemplateUtil.ExpandUsing( astNodeClass.Usings ) #>
namespace <#= nameSpace #>
{
    /// <summary>
    /// AST node representing <#= astNodeClass.Description #>
    /// </summary>
<# if( !string.IsNullOrEmpty( attribute ) ) { #>
    <#= attribute #>
    public partial class <#= className #> : <#= baseClass #>
<# } else { #>
    public partial class <#= className #> : <#= baseClass #>
<# } #>
    {
<# if( hasField ) { #>
        #region Fields
<#= field #>
        #endregion Fields
<# }#>

<# if( !string.IsNullOrEmpty( ctor ) ) { #>
<#= ctor #>
<# } else { #>
        /// <summary>
        /// Ctor
        /// </summary>
        public <#= className #>( IAstNode parent )
            : base( AstNodeId.<#= astId #>, parent )
        {}
<# } #>
<# if( nameable ) {#>

        #region INameable
        ///
        /// <inheritdoc/>
        ///
        public string Name { get; set; } = "";
        #endregion INameable
<# }#>
<# if( hasAnyAcceptor ) { #>

        #region IAstNodeAcceptor
<# }#>
<# if( hasAccept ) { #>

        ///
        /// <inheritdoc/>
        ///
        public override T Accept<T>( IAstVisitor<T> visitor )
<# if( string.IsNullOrEmpty( acceptStatement )) { #>
        {
            return visitor.Visit( this );
        }
<# } else { #>
        {
<#= acceptStatement #>
        }
<# }#>
<# }#>
<# if( hasAcceptChildren ) { #>

        ///
        /// <inheritdoc/>
        ///
        public override void AcceptChildren<T>( IAstVisitor<T> visitor )
<# if( string.IsNullOrEmpty( acceptChildrenStatement )) { #>
        {}
<# } else { #>
        {
<#= acceptChildrenStatement #>
        }
<# }#>
<# }#>
<# if( hasAnyAcceptor ) { #>

        #endregion IAstNodeAcceptor
<# }#>
    }
}
